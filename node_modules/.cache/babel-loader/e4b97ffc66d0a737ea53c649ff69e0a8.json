{"ast":null,"code":"'use strict';\n\nvar tls = require('tls');\nfunction buildBuilder(mqttClient, opts) {\n  var connection;\n  opts.port = opts.port || 8883;\n  opts.host = opts.hostname || opts.host || 'localhost';\n  opts.rejectUnauthorized = false !== opts.rejectUnauthorized;\n  connection = tls.connect(opts);\n  /*eslint no-use-before-define: [2, \"nofunc\"]*/\n  connection.on('secureConnect', function () {\n    if (opts.rejectUnauthorized && !connection.authorized) {\n      connection.emit('error', new Error('TLS not authorized'));\n    } else {\n      connection.removeListener('error', handleTLSerrors);\n    }\n  });\n\n  /*\n   * to comply with strict rules, a function must be\n   * declared before it can be used\n   * so i moved it has to be  moved before its first call\n   * later on maybe we can move all of them to the top of the file\n   * for now i just suppressed the warning\n   */\n  /*jshint latedef:false*/\n  function handleTLSerrors(err) {\n    // How can I get verify this error is a tls error?\n    if (opts.rejectUnauthorized) {\n      mqttClient.emit('error', err);\n    }\n\n    // close this connection to match the behaviour of net\n    // otherwise all we get is an error from the connection\n    // and close event doesn't fire. This is a work around\n    // to enable the reconnect code to work the same as with\n    // net.createConnection\n    connection.end();\n  }\n  /*jshint latedef:false*/\n\n  connection.on('error', handleTLSerrors);\n  return connection;\n}\nmodule.exports = buildBuilder;","map":{"version":3,"names":["tls","require","buildBuilder","mqttClient","opts","connection","port","host","hostname","rejectUnauthorized","connect","on","authorized","emit","Error","removeListener","handleTLSerrors","err","end","module","exports"],"sources":["D:/UFPB/aquisição/hb/aquisicao/node_modules/mqtt-client/lib/connect/tls.js"],"sourcesContent":["'use strict';\nvar tls = require('tls');\n\nfunction buildBuilder (mqttClient, opts) {\n  var connection;\n  opts.port = opts.port || 8883;\n  opts.host = opts.hostname || opts.host || 'localhost';\n\n  opts.rejectUnauthorized = false !== opts.rejectUnauthorized;\n\n  connection = tls.connect(opts);\n  /*eslint no-use-before-define: [2, \"nofunc\"]*/\n  connection.on('secureConnect', function () {\n    if (opts.rejectUnauthorized && !connection.authorized) {\n      connection.emit('error', new Error('TLS not authorized'));\n    } else {\n      connection.removeListener('error', handleTLSerrors);\n    }\n  });\n\n  /*\n   * to comply with strict rules, a function must be\n   * declared before it can be used\n   * so i moved it has to be  moved before its first call\n   * later on maybe we can move all of them to the top of the file\n   * for now i just suppressed the warning\n   */\n  /*jshint latedef:false*/\n  function handleTLSerrors (err) {\n    // How can I get verify this error is a tls error?\n    if (opts.rejectUnauthorized) {\n      mqttClient.emit('error', err);\n    }\n\n    // close this connection to match the behaviour of net\n    // otherwise all we get is an error from the connection\n    // and close event doesn't fire. This is a work around\n    // to enable the reconnect code to work the same as with\n    // net.createConnection\n    connection.end();\n  }\n  /*jshint latedef:false*/\n\n  connection.on('error', handleTLSerrors);\n  return connection;\n}\n\nmodule.exports = buildBuilder;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAExB,SAASC,YAAY,CAAEC,UAAU,EAAEC,IAAI,EAAE;EACvC,IAAIC,UAAU;EACdD,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACE,IAAI,IAAI,IAAI;EAC7BF,IAAI,CAACG,IAAI,GAAGH,IAAI,CAACI,QAAQ,IAAIJ,IAAI,CAACG,IAAI,IAAI,WAAW;EAErDH,IAAI,CAACK,kBAAkB,GAAG,KAAK,KAAKL,IAAI,CAACK,kBAAkB;EAE3DJ,UAAU,GAAGL,GAAG,CAACU,OAAO,CAACN,IAAI,CAAC;EAC9B;EACAC,UAAU,CAACM,EAAE,CAAC,eAAe,EAAE,YAAY;IACzC,IAAIP,IAAI,CAACK,kBAAkB,IAAI,CAACJ,UAAU,CAACO,UAAU,EAAE;MACrDP,UAAU,CAACQ,IAAI,CAAC,OAAO,EAAE,IAAIC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC3D,CAAC,MAAM;MACLT,UAAU,CAACU,cAAc,CAAC,OAAO,EAAEC,eAAe,CAAC;IACrD;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACA,SAASA,eAAe,CAAEC,GAAG,EAAE;IAC7B;IACA,IAAIb,IAAI,CAACK,kBAAkB,EAAE;MAC3BN,UAAU,CAACU,IAAI,CAAC,OAAO,EAAEI,GAAG,CAAC;IAC/B;;IAEA;IACA;IACA;IACA;IACA;IACAZ,UAAU,CAACa,GAAG,EAAE;EAClB;EACA;;EAEAb,UAAU,CAACM,EAAE,CAAC,OAAO,EAAEK,eAAe,CAAC;EACvC,OAAOX,UAAU;AACnB;AAEAc,MAAM,CAACC,OAAO,GAAGlB,YAAY"},"metadata":{},"sourceType":"script"}