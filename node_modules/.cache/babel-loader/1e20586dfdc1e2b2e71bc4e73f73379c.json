{"ast":null,"code":"'use strict';\n\nvar MqttClient = require('../client'),\n  url = require('url'),\n  xtend = require('xtend'),\n  protocols = {},\n  protocolList = [];\nif ('browser' !== process.title) {\n  protocols.mqtt = require('./tcp');\n  protocols.tcp = require('./tcp');\n  protocols.ssl = require('./tls');\n  protocols.tls = require('./tls');\n  protocols.mqtts = require('./tls');\n}\nprotocols.ws = require('./ws');\nprotocols.wss = require('./ws');\nprotocolList = ['mqtt', 'mqtts', 'ws', 'wss'];\n\n/**\n * Parse the auth attribute and merge username and password in the options object.\n *\n * @param {Object} [opts] option object\n */\nfunction parseAuthOptions(opts) {\n  var matches;\n  if (opts.auth) {\n    matches = opts.auth.match(/^(.+):(.+)$/);\n    if (matches) {\n      opts.username = matches[1];\n      opts.password = matches[2];\n    } else {\n      opts.username = opts.auth;\n    }\n  }\n}\n\n/**\n * connect - connect to an MQTT broker.\n *\n * @param {String} [brokerUrl] - url of the broker, optional\n * @param {Object} opts - see MqttClient#constructor\n */\nfunction connect(brokerUrl, opts) {\n  if ('object' === typeof brokerUrl && !opts) {\n    opts = brokerUrl;\n    brokerUrl = null;\n  }\n  opts = opts || {};\n  if (brokerUrl) {\n    opts = xtend(url.parse(brokerUrl, true), opts);\n    opts.protocol = opts.protocol.replace(/\\:$/, '');\n  }\n\n  // merge in the auth options if supplied\n  parseAuthOptions(opts);\n\n  // support clientId passed in the query string of the url\n  if (opts.query && 'string' === typeof opts.query.clientId) {\n    opts.clientId = opts.query.clientId;\n  }\n  if (opts.cert && opts.key) {\n    if (opts.protocol) {\n      if (-1 === ['mqtts', 'wss'].indexOf(opts.protocol)) {\n        /*\n         * jshint and eslint\n         * complains that break from default cannot be reached after throw\n         * it is a foced exit from a control structure\n         * maybe add a check after switch to see if it went through default\n         * and then throw the error\n        */\n        /*jshint -W027*/\n        /*eslint no-unreachable:1*/\n        switch (opts.protocol) {\n          case 'mqtt':\n            opts.protocol = 'mqtts';\n            break;\n          case 'ws':\n            opts.protocol = 'wss';\n            break;\n          default:\n            throw new Error('Unknown protocol for secure conenction: \"' + opts.protocol + '\"!');\n            break;\n        }\n        /*eslint no-unreachable:0*/\n        /*jshint +W027*/\n      }\n    } else {\n      // don't know what protocol he want to use, mqtts or wss\n      throw new Error('Missing secure protocol key');\n    }\n  }\n  if (!protocols[opts.protocol]) {\n    opts.protocol = protocolList.filter(function (key) {\n      return 'function' === typeof protocols[key];\n    })[0];\n  }\n  if (false === opts.clean && !opts.clientId) {\n    throw new Error('Missing clientId for unclean clients');\n  }\n  function wrapper(client) {\n    if (opts.servers) {\n      if (!client._reconnectCount || client._reconnectCount === opts.servers.length) {\n        client._reconnectCount = 0;\n      }\n      opts.host = opts.servers[client._reconnectCount].host;\n      opts.port = opts.servers[client._reconnectCount].port;\n      opts.hostname = opts.host;\n      client._reconnectCount++;\n    }\n    return protocols[opts.protocol](client, opts);\n  }\n  return new MqttClient(wrapper, opts);\n}\nmodule.exports = connect;\nmodule.exports.connect = connect;","map":{"version":3,"names":["MqttClient","require","url","xtend","protocols","protocolList","process","title","mqtt","tcp","ssl","tls","mqtts","ws","wss","parseAuthOptions","opts","matches","auth","match","username","password","connect","brokerUrl","parse","protocol","replace","query","clientId","cert","key","indexOf","Error","filter","clean","wrapper","client","servers","_reconnectCount","length","host","port","hostname","module","exports"],"sources":["D:/UFPB/aquisição/hb/aquisicao/node_modules/mqtt-client/lib/connect/index.js"],"sourcesContent":["'use strict';\nvar MqttClient = require('../client'),\n  url = require('url'),\n  xtend = require('xtend'),\n  protocols = {},\n  protocolList = [];\n\nif ('browser' !== process.title) {\n  protocols.mqtt = require('./tcp');\n  protocols.tcp = require('./tcp');\n  protocols.ssl = require('./tls');\n  protocols.tls = require('./tls');\n  protocols.mqtts = require('./tls');\n}\n\nprotocols.ws = require('./ws');\nprotocols.wss = require('./ws');\n\nprotocolList = [\n  'mqtt',\n  'mqtts',\n  'ws',\n  'wss'\n];\n\n\n/**\n * Parse the auth attribute and merge username and password in the options object.\n *\n * @param {Object} [opts] option object\n */\nfunction parseAuthOptions (opts) {\n  var matches;\n  if (opts.auth) {\n    matches = opts.auth.match(/^(.+):(.+)$/);\n    if (matches) {\n      opts.username = matches[1];\n      opts.password = matches[2];\n    } else {\n      opts.username = opts.auth;\n    }\n  }\n}\n\n/**\n * connect - connect to an MQTT broker.\n *\n * @param {String} [brokerUrl] - url of the broker, optional\n * @param {Object} opts - see MqttClient#constructor\n */\nfunction connect (brokerUrl, opts) {\n\n  if (('object' === typeof brokerUrl) && !opts) {\n    opts = brokerUrl;\n    brokerUrl = null;\n  }\n\n  opts = opts || {};\n\n  if (brokerUrl) {\n    opts = xtend(url.parse(brokerUrl, true), opts);\n    opts.protocol = opts.protocol.replace(/\\:$/, '');\n  }\n\n  // merge in the auth options if supplied\n  parseAuthOptions(opts);\n\n  // support clientId passed in the query string of the url\n  if (opts.query && 'string' === typeof opts.query.clientId) {\n    opts.clientId = opts.query.clientId;\n  }\n\n  if (opts.cert && opts.key) {\n    if (opts.protocol) {\n      if (-1 === ['mqtts', 'wss'].indexOf(opts.protocol)) {\n        /*\n         * jshint and eslint\n         * complains that break from default cannot be reached after throw\n         * it is a foced exit from a control structure\n         * maybe add a check after switch to see if it went through default\n         * and then throw the error\n        */\n        /*jshint -W027*/\n        /*eslint no-unreachable:1*/\n        switch (opts.protocol) {\n          case 'mqtt':\n            opts.protocol = 'mqtts';\n            break;\n          case 'ws':\n            opts.protocol = 'wss';\n            break;\n          default:\n            throw new Error('Unknown protocol for secure conenction: \"' + opts.protocol + '\"!');\n            break;\n        }\n        /*eslint no-unreachable:0*/\n        /*jshint +W027*/\n      }\n    } else {\n      // don't know what protocol he want to use, mqtts or wss\n      throw new Error('Missing secure protocol key');\n    }\n  }\n\n  if (!protocols[opts.protocol]) {\n    opts.protocol = protocolList.filter(function (key) {\n      return 'function' === typeof protocols[key];\n    })[0];\n  }\n\n  if (false === opts.clean && !opts.clientId) {\n    throw new Error('Missing clientId for unclean clients');\n  }\n\n\n  function wrapper (client) {\n    if (opts.servers) {\n      if (!client._reconnectCount || client._reconnectCount === opts.servers.length) {\n        client._reconnectCount = 0;\n      }\n\n      opts.host = opts.servers[client._reconnectCount].host;\n      opts.port = opts.servers[client._reconnectCount].port;\n      opts.hostname = opts.host;\n\n      client._reconnectCount++;\n    }\n\n    return protocols[opts.protocol](client, opts);\n  }\n\n  return new MqttClient(wrapper, opts);\n}\n\nmodule.exports = connect;\nmodule.exports.connect = connect;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}